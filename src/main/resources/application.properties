#SQLStudents
getAllStudents=SELECT * FROM university.students
getStudentById=SELECT * FROM university.students WHERE student_id = ?
deleteStudent=DELETE FROM university.students WHERE student_id = ?
updateStudent=UPDATE university.students SET first_name = ?, last_name = ?, group_id = ? WHERE student_id = ?
createStudent=INSERT INTO university.students (first_name, last_name) VALUES (? , ?)
removeStudentFromCourse=DELETE FROM university.students_courses WHERE student_id = ? AND course_id = ?
addStudentToCourse=INSERT INTO university.students_courses (student_id, course_id) VALUES (? , ?)
getStudentsPerCourseName=SELECT students.student_id, students.group_id, students.first_name, students.last_name FROM university.students LEFT JOIN university.students_courses ON students_courses.student_id = students.student_id LEFT JOIN university.courses ON courses.course_id = students_courses.course_id WHERE courses.course_name = ?
#
#SQLGroups
getAllGroups=SELECT * FROM university.groups
getGroupById=SELECT * FROM university.groups WHERE group_id = ?
deleteGroup=DELETE FROM university.groups WHERE group_id = ?
updateGroup=UPDATE university.groups SET group_name = ? WHERE group_id = ?
createGroup=INSERT INTO university.groups (group_name) VALUES (?)
getGroupsWithLessOrEqualsStudentCount=SELECT st.group_id, gr.group_name, COUNT(st.group_id) studentscount FROM university.students st LEFT JOIN university.groups gr ON st.group_id = gr.group_id GROUP BY st.group_id, gr.group_name HAVING COUNT(st.group_id) <= ? AND st.group_id IS NOT NULL
#
#SQLCourses
getAllCourses=SELECT * FROM university.courses
getCourseById=SELECT * FROM university.courses WHERE course_id = ?
deleteCourse=DELETE FROM university.courses WHERE course_id = ?
updateCourse=UPDATE university.courses SET course_name = ?, course_description = ? WHERE course_id = ?
createCourse=INSERT INTO university.courses (course_name, course_description) VALUES (?, ?)
#
#Scripts
createTablesScript=CREATE SCHEMA IF NOT EXISTS school;\r\nSET SCHEMA school;\r\nDROP TABLE IF EXISTS university.students CASCADE;\r\nCREATE TABLE university.students\r\n(\r\n    student_id serial NOT NULL,\r\n    group_id integer,\r\n    first_name character varying(255) NOT NULL,\r\n    last_name character varying(255) NOT NULL,\r\n    CONSTRAINT students_pkey PRIMARY KEY (student_id)\r\n);\r\nDROP TABLE IF EXISTS university.courses CASCADE;\r\nCREATE TABLE university.courses\r\n(\r\n    course_id serial NOT NULL,\r\n    course_name character varying(255) NOT NULL,\r\n    course_description character varying(255),\r\n    CONSTRAINT courses_pkey PRIMARY KEY (course_id)\r\n);\r\nDROP TABLE IF EXISTS university.groups CASCADE;\r\nCREATE TABLE university.groups\r\n(\r\n    group_id serial NOT NULL,\r\n    group_name character varying(255) NOT NULL,\r\n    CONSTRAINT groups_pkey PRIMARY KEY (group_id)\r\n);\r\nDROP TABLE IF EXISTS university.students_courses CASCADE;\r\nCREATE TABLE university.students_courses\r\n(\r\nstudent_id integer NOT NULL,\r\ncourse_id integer NOT NULL,\r\nFOREIGN KEY (student_id) REFERENCES university.students (student_id) ON DELETE CASCADE ON UPDATE CASCADE,\r\nFOREIGN KEY (course_id) REFERENCES university.courses (course_id) ON DELETE CASCADE ON UPDATE CASCADE,\r\nCONSTRAINT students_courses_pkey PRIMARY KEY (student_id, course_id));\r\n
wipeTablesScript=DELETE FROM university.students;\r\nDELETE FROM university.groups;\r\nDELETE FROM university.courses;\r\nDELETE FROM university.students_courses;\r\n